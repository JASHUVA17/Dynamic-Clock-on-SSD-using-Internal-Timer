

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Jul 23 08:28:29 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4580 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     
    62                           	psect	idataCOMRAM
    63   000DA0                     __pidataCOMRAM:
    64                           	callstack 0
    65                           
    66                           ;initializer for _digit
    67   000DA0  E7                 	db	231
    68   000DA1  21                 	db	33
    69   000DA2  CB                 	db	203
    70   000DA3  6B                 	db	107
    71   000DA4  2D                 	db	45
    72   000DA5  6E                 	db	110
    73   000DA6  EE                 	db	238
    74   000DA7  23                 	db	35
    75   000DA8  EF                 	db	239
    76   000DA9  6F                 	db	111
    77                           
    78                           ;initializer for read_digital_keypad@once
    79   000DAA  01                 	db	1
    80   000000                     _GIE	set	32663
    81   000000                     _TMR0IE	set	32661
    82   000000                     _TMR0IF	set	32658
    83   000000                     _PSA	set	32427
    84   000000                     _T0CS	set	32429
    85   000000                     _T08BIT	set	32430
    86   000000                     _PORTA	set	3968
    87   000000                     _TRISA	set	3986
    88   000000                     _TRISD	set	3989
    89   000000                     _TMR0ON	set	32431
    90   000000                     _TMR0	set	4054
    91   000000                     _PEIE	set	32662
    92   000000                     _ADCON1	set	4033
    93   000000                     _TRISC	set	3988
    94   000000                     _PORTC	set	3970
    95   000000                     _PORTD	set	3971
    96                           
    97                           ; #config settings
    98                           
    99                           	psect	cinit
   100   000D16                     __pcinit:
   101                           	callstack 0
   102   000D16                     start_initialization:
   103                           	callstack 0
   104   000D16                     __initialization:
   105                           	callstack 0
   106                           
   107                           ; Initialize objects allocated to COMRAM (11 bytes)
   108                           ; load TBLPTR registers with __pidataCOMRAM
   109   000D16  0EA0               	movlw	low __pidataCOMRAM
   110   000D18  6EF6               	movwf	tblptrl,c
   111   000D1A  0E0D               	movlw	high __pidataCOMRAM
   112   000D1C  6EF7               	movwf	tblptrh,c
   113   000D1E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   114   000D20  6EF8               	movwf	tblptru,c
   115   000D22  EE00  F01E         	lfsr	0,__pdataCOMRAM
   116   000D26  EE10 F00B          	lfsr	1,11
   117   000D2A                     copy_data0:
   118   000D2A  0009               	tblrd		*+
   119   000D2C  CFF5 FFEE          	movff	tablat,postinc0
   120   000D30  50E5               	movf	postdec1,w,c
   121   000D32  50E1               	movf	fsr1l,w,c
   122   000D34  E1FA               	bnz	copy_data0
   123                           
   124                           ; Clear objects allocated to COMRAM (12 bytes)
   125   000D36  EE00  F012         	lfsr	0,__pbssCOMRAM
   126   000D3A  0E0C               	movlw	12
   127   000D3C                     clear_0:
   128   000D3C  6AEE               	clrf	postinc0,c
   129   000D3E  06E8               	decf	wreg,f,c
   130   000D40  E1FD               	bnz	clear_0
   131   000D42                     end_of_initialization:
   132                           	callstack 0
   133   000D42                     __end_of__initialization:
   134                           	callstack 0
   135   000D42  9029               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   136   000D44  9229               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   137   000D46  0100               	movlb	0
   138   000D48  EF01  F003         	goto	_main	;jump to C main() function
   139                           
   140                           	psect	bssCOMRAM
   141   000012                     __pbssCOMRAM:
   142                           	callstack 0
   143   000012                     isr@count:
   144                           	callstack 0
   145   000012                     	ds	2
   146   000014                     _sec:
   147                           	callstack 0
   148   000014                     	ds	2
   149   000016                     _mins:
   150                           	callstack 0
   151   000016                     	ds	2
   152   000018                     _hours:
   153                           	callstack 0
   154   000018                     	ds	2
   155   00001A                     _ssd:
   156                           	callstack 0
   157   00001A                     	ds	4
   158                           
   159                           	psect	dataCOMRAM
   160   00001E                     __pdataCOMRAM:
   161                           	callstack 0
   162   00001E                     _digit:
   163                           	callstack 0
   164   00001E                     	ds	10
   165   000028                     read_digital_keypad@once:
   166                           	callstack 0
   167   000028                     	ds	1
   168                           
   169                           	psect	cstackCOMRAM
   170   000001                     __pcstackCOMRAM:
   171                           	callstack 0
   172   000001                     ?___awdiv:
   173                           	callstack 0
   174   000001                     ?___awmod:
   175                           	callstack 0
   176   000001                     read_digital_keypad@detection_type:
   177                           	callstack 0
   178   000001                     display@data:
   179                           	callstack 0
   180   000001                     ___awdiv@dividend:
   181                           	callstack 0
   182   000001                     ___awmod@dividend:
   183                           	callstack 0
   184                           
   185                           ; 2 bytes @ 0x0
   186   000001                     	ds	1
   187   000002                     ??_display:
   188                           
   189                           ; 1 bytes @ 0x1
   190   000002                     	ds	1
   191   000003                     ___awdiv@divisor:
   192                           	callstack 0
   193   000003                     ___awmod@divisor:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x2
   197   000003                     	ds	1
   198   000004                     display@wait:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x3
   202   000004                     	ds	1
   203   000005                     ___awdiv@counter:
   204                           	callstack 0
   205   000005                     ___awmod@counter:
   206                           	callstack 0
   207                           
   208                           ; 1 bytes @ 0x4
   209   000005                     	ds	1
   210   000006                     display@digit:
   211                           	callstack 0
   212   000006                     ___awdiv@sign:
   213                           	callstack 0
   214   000006                     ___awmod@sign:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x5
   218   000006                     	ds	1
   219   000007                     ___awdiv@quotient:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x6
   223   000007                     	ds	2
   224   000009                     ??_main:
   225                           
   226                           ; 1 bytes @ 0x8
   227   000009                     	ds	1
   228   00000A                     main@flag:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x9
   232   00000A                     	ds	2
   233   00000C                     main@select_flag:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0xB
   237   00000C                     	ds	2
   238   00000E                     main@wait:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0xD
   242   00000E                     	ds	2
   243   000010                     main@key:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0xF
   247   000010                     	ds	2
   248                           
   249 ;;
   250 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   251 ;;
   252 ;; *************** function _main *****************
   253 ;; Defined at:
   254 ;;		line 15 in file "main.c"
   255 ;; Parameters:    Size  Location     Type
   256 ;;		None
   257 ;; Auto vars:     Size  Location     Type
   258 ;;  key             2   15[COMRAM] int 
   259 ;;  wait            2   13[COMRAM] unsigned int 
   260 ;;  select_flag     2   11[COMRAM] int 
   261 ;;  flag            2    9[COMRAM] int 
   262 ;;  delay           2    0        unsigned int 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   272 ;;      Params:         0       0       0       0       0       0       0
   273 ;;      Locals:         8       0       0       0       0       0       0
   274 ;;      Temps:          1       0       0       0       0       0       0
   275 ;;      Totals:         9       0       0       0       0       0       0
   276 ;;Total ram usage:        9 bytes
   277 ;; Hardware stack levels required when called: 3
   278 ;; This function calls:
   279 ;;		___awdiv
   280 ;;		___awmod
   281 ;;		_display
   282 ;;		_init_config
   283 ;;		_read_digital_keypad
   284 ;; This function is called by:
   285 ;;		Startup code after reset
   286 ;; This function uses a non-reentrant model
   287 ;;
   288                           
   289                           	psect	text0
   290   000602                     __ptext0:
   291                           	callstack 0
   292   000602                     _main:
   293                           	callstack 28
   294   000602                     
   295                           ;main.c: 16:     int key, flag = 0, select_flag = 0;
   296   000602  0E00               	movlw	0
   297   000604  6E0B               	movwf	(main@flag+1)^0,c
   298   000606  0E00               	movlw	0
   299   000608  6E0A               	movwf	main@flag^0,c
   300   00060A  0E00               	movlw	0
   301   00060C  6E0D               	movwf	(main@select_flag+1)^0,c
   302   00060E  0E00               	movlw	0
   303   000610  6E0C               	movwf	main@select_flag^0,c
   304   000612  0E00               	movlw	0
   305   000614  6E0F               	movwf	(main@wait+1)^0,c
   306   000616  0E00               	movlw	0
   307   000618  6E0E               	movwf	main@wait^0,c
   308   00061A                     
   309                           ;main.c: 18:     init_config();
   310   00061A  ECA6  F006         	call	_init_config	;wreg free
   311   00061E                     l1187:
   312                           
   313                           ;main.c: 20:         key = read_digital_keypad(1);
   314   00061E  0E01               	movlw	1
   315   000620  EC1D  F006         	call	_read_digital_keypad
   316   000624  6E09               	movwf	??_main^0,c
   317   000626  5009               	movf	??_main^0,w,c
   318   000628  6E10               	movwf	main@key^0,c
   319   00062A  6A11               	clrf	(main@key+1)^0,c
   320   00062C                     
   321                           ;main.c: 21:         if (key == 0x07) {
   322   00062C  0E07               	movlw	7
   323   00062E  1810               	xorwf	main@key^0,w,c
   324   000630  1011               	iorwf	(main@key+1)^0,w,c
   325   000632  A4D8               	btfss	status,2,c
   326   000634  EF1E  F003         	goto	u651
   327   000638  EF20  F003         	goto	u650
   328   00063C                     u651:
   329   00063C  EF3A  F003         	goto	l1197
   330   000640                     u650:
   331   000640                     
   332                           ;main.c: 22:             TMR0ON = !TMR0ON;
   333   000640  AED5               	btfss	4053,7,c	;volatile
   334   000642  EF25  F003         	goto	u661
   335   000646  EF28  F003         	goto	u660
   336   00064A                     u661:
   337   00064A  8ED5               	bsf	4053,7,c	;volatile
   338   00064C  EF29  F003         	goto	u675
   339   000650                     u660:
   340   000650  9ED5               	bcf	4053,7,c	;volatile
   341   000652                     u675:
   342   000652                     
   343                           ;main.c: 23:             flag = !flag;
   344   000652  500A               	movf	main@flag^0,w,c
   345   000654  100B               	iorwf	(main@flag+1)^0,w,c
   346   000656  B4D8               	btfsc	status,2,c
   347   000658  EF30  F003         	goto	u681
   348   00065C  EF33  F003         	goto	u680
   349   000660                     u681:
   350   000660  0E01               	movlw	1
   351   000662  EF34  F003         	goto	u690
   352   000666                     u680:
   353   000666  0E00               	movlw	0
   354   000668                     u690:
   355   000668  6E0A               	movwf	main@flag^0,c
   356   00066A  6A0B               	clrf	(main@flag+1)^0,c
   357   00066C                     
   358                           ;main.c: 24:             wait = 0;
   359   00066C  0E00               	movlw	0
   360   00066E  6E0F               	movwf	(main@wait+1)^0,c
   361   000670  0E00               	movlw	0
   362   000672  6E0E               	movwf	main@wait^0,c
   363   000674                     l1197:
   364                           
   365                           ;main.c: 26:         if (flag == 1) {
   366   000674  040A               	decf	main@flag^0,w,c
   367   000676  100B               	iorwf	(main@flag+1)^0,w,c
   368   000678  A4D8               	btfss	status,2,c
   369   00067A  EF41  F003         	goto	u701
   370   00067E  EF43  F003         	goto	u700
   371   000682                     u701:
   372   000682  EFAA  F004         	goto	l59
   373   000686                     u700:
   374   000686                     
   375                           ;main.c: 27:             if (key == 0x0B) {
   376   000686  0E0B               	movlw	11
   377   000688  1810               	xorwf	main@key^0,w,c
   378   00068A  1011               	iorwf	(main@key+1)^0,w,c
   379   00068C  A4D8               	btfss	status,2,c
   380   00068E  EF4B  F003         	goto	u711
   381   000692  EF4D  F003         	goto	u710
   382   000696                     u711:
   383   000696  EF62  F003         	goto	l60
   384   00069A                     u710:
   385   00069A                     
   386                           ;main.c: 28:                 select_flag = !select_flag;
   387   00069A  500C               	movf	main@select_flag^0,w,c
   388   00069C  100D               	iorwf	(main@select_flag+1)^0,w,c
   389   00069E  B4D8               	btfsc	status,2,c
   390   0006A0  EF54  F003         	goto	u721
   391   0006A4  EF57  F003         	goto	u720
   392   0006A8                     u721:
   393   0006A8  0E01               	movlw	1
   394   0006AA  EF58  F003         	goto	u730
   395   0006AE                     u720:
   396   0006AE  0E00               	movlw	0
   397   0006B0                     u730:
   398   0006B0  6E0C               	movwf	main@select_flag^0,c
   399   0006B2  6A0D               	clrf	(main@select_flag+1)^0,c
   400   0006B4                     
   401                           ;main.c: 29:                 wait = 0;
   402   0006B4  0E00               	movlw	0
   403   0006B6  6E0F               	movwf	(main@wait+1)^0,c
   404   0006B8  0E00               	movlw	0
   405   0006BA  6E0E               	movwf	main@wait^0,c
   406   0006BC                     
   407                           ;main.c: 30:                 sec = 0;
   408   0006BC  0E00               	movlw	0
   409   0006BE  6E15               	movwf	(_sec+1)^0,c
   410   0006C0  0E00               	movlw	0
   411   0006C2  6E14               	movwf	_sec^0,c
   412   0006C4                     l60:
   413                           
   414                           ;main.c: 32:             if (select_flag == 0) {
   415   0006C4  500C               	movf	main@select_flag^0,w,c
   416   0006C6  100D               	iorwf	(main@select_flag+1)^0,w,c
   417   0006C8  A4D8               	btfss	status,2,c
   418   0006CA  EF69  F003         	goto	u741
   419   0006CE  EF6B  F003         	goto	u740
   420   0006D2                     u741:
   421   0006D2  EF07  F004         	goto	l1233
   422   0006D6                     u740:
   423   0006D6                     
   424                           ;main.c: 33:                 ssd[0] = digit[hours / 10];
   425   0006D6  C018  F001         	movff	_hours,___awdiv@dividend
   426   0006DA  C019  F002         	movff	_hours+1,___awdiv@dividend+1
   427   0006DE  0E00               	movlw	0
   428   0006E0  6E04               	movwf	(___awdiv@divisor+1)^0,c
   429   0006E2  0E0A               	movlw	10
   430   0006E4  6E03               	movwf	___awdiv@divisor^0,c
   431   0006E6  EC0C  F005         	call	___awdiv	;wreg free
   432   0006EA  5001               	movf	?___awdiv^0,w,c
   433   0006EC  0F1E               	addlw	low _digit
   434   0006EE  6ED9               	movwf	fsr2l,c
   435   0006F0  6ADA               	clrf	fsr2h,c
   436   0006F2  50DF               	movf	indf2,w,c
   437   0006F4  6E1A               	movwf	_ssd^0,c
   438                           
   439                           ;main.c: 34:                 ssd[1] = digit[hours % 10];
   440   0006F6  C018  F001         	movff	_hours,___awmod@dividend
   441   0006FA  C019  F002         	movff	_hours+1,___awmod@dividend+1
   442   0006FE  0E00               	movlw	0
   443   000700  6E04               	movwf	(___awmod@divisor+1)^0,c
   444   000702  0E0A               	movlw	10
   445   000704  6E03               	movwf	___awmod@divisor^0,c
   446   000706  EC6E  F005         	call	___awmod	;wreg free
   447   00070A  5001               	movf	?___awmod^0,w,c
   448   00070C  0F1E               	addlw	low _digit
   449   00070E  6ED9               	movwf	fsr2l,c
   450   000710  6ADA               	clrf	fsr2h,c
   451   000712  50DF               	movf	indf2,w,c
   452   000714  6E1B               	movwf	(_ssd+1)^0,c
   453   000716                     
   454                           ;main.c: 36:                 if (wait++ == 100) {
   455   000716  4A0E               	infsnz	main@wait^0,f,c
   456   000718  2A0F               	incf	(main@wait+1)^0,f,c
   457   00071A  0E65               	movlw	101
   458   00071C  180E               	xorwf	main@wait^0,w,c
   459   00071E  100F               	iorwf	(main@wait+1)^0,w,c
   460   000720  A4D8               	btfss	status,2,c
   461   000722  EF95  F003         	goto	u751
   462   000726  EF97  F003         	goto	u750
   463   00072A                     u751:
   464   00072A  EFB9  F003         	goto	l1213
   465   00072E                     u750:
   466   00072E                     
   467                           ;main.c: 37:                     ssd[2] = digit[mins / 10];
   468   00072E  C016  F001         	movff	_mins,___awdiv@dividend
   469   000732  C017  F002         	movff	_mins+1,___awdiv@dividend+1
   470   000736  0E00               	movlw	0
   471   000738  6E04               	movwf	(___awdiv@divisor+1)^0,c
   472   00073A  0E0A               	movlw	10
   473   00073C  6E03               	movwf	___awdiv@divisor^0,c
   474   00073E  EC0C  F005         	call	___awdiv	;wreg free
   475   000742  5001               	movf	?___awdiv^0,w,c
   476   000744  0F1E               	addlw	low _digit
   477   000746  6ED9               	movwf	fsr2l,c
   478   000748  6ADA               	clrf	fsr2h,c
   479   00074A  50DF               	movf	indf2,w,c
   480   00074C  6E1C               	movwf	(_ssd+2)^0,c
   481                           
   482                           ;main.c: 38:                     ssd[3] = digit[mins % 10];
   483   00074E  C016  F001         	movff	_mins,___awmod@dividend
   484   000752  C017  F002         	movff	_mins+1,___awmod@dividend+1
   485   000756  0E00               	movlw	0
   486   000758  6E04               	movwf	(___awmod@divisor+1)^0,c
   487   00075A  0E0A               	movlw	10
   488   00075C  6E03               	movwf	___awmod@divisor^0,c
   489   00075E  EC6E  F005         	call	___awmod	;wreg free
   490   000762  5001               	movf	?___awmod^0,w,c
   491   000764  0F1E               	addlw	low _digit
   492   000766  6ED9               	movwf	fsr2l,c
   493   000768  6ADA               	clrf	fsr2h,c
   494   00076A  50DF               	movf	indf2,w,c
   495   00076C  6E1D               	movwf	(_ssd+3)^0,c
   496                           
   497                           ;main.c: 39:                 } else if (wait == 200) {
   498   00076E  EFCB  F003         	goto	l1217
   499   000772                     l1213:
   500   000772  0EC8               	movlw	200
   501   000774  180E               	xorwf	main@wait^0,w,c
   502   000776  100F               	iorwf	(main@wait+1)^0,w,c
   503   000778  A4D8               	btfss	status,2,c
   504   00077A  EFC1  F003         	goto	u761
   505   00077E  EFC3  F003         	goto	u760
   506   000782                     u761:
   507   000782  EFCB  F003         	goto	l1217
   508   000786                     u760:
   509   000786                     
   510                           ;main.c: 40:                     wait = 0;
   511   000786  0E00               	movlw	0
   512   000788  6E0F               	movwf	(main@wait+1)^0,c
   513   00078A  0E00               	movlw	0
   514   00078C  6E0E               	movwf	main@wait^0,c
   515                           
   516                           ;main.c: 41:                     ssd[2] = 0x40;
   517   00078E  0E40               	movlw	64
   518   000790  6E1C               	movwf	(_ssd+2)^0,c
   519                           
   520                           ;main.c: 42:                     ssd[3] = 0x40;
   521   000792  0E40               	movlw	64
   522   000794  6E1D               	movwf	(_ssd+3)^0,c
   523   000796                     l1217:
   524                           
   525                           ;main.c: 45:                 if (key == 0x0E) {
   526   000796  0E0E               	movlw	14
   527   000798  1810               	xorwf	main@key^0,w,c
   528   00079A  1011               	iorwf	(main@key+1)^0,w,c
   529   00079C  A4D8               	btfss	status,2,c
   530   00079E  EFD3  F003         	goto	u771
   531   0007A2  EFD5  F003         	goto	u770
   532   0007A6                     u771:
   533   0007A6  EFEB  F003         	goto	l1225
   534   0007AA                     u770:
   535   0007AA                     
   536                           ;main.c: 46:                     mins++;
   537   0007AA  4A16               	infsnz	_mins^0,f,c
   538   0007AC  2A17               	incf	(_mins+1)^0,f,c
   539   0007AE                     
   540                           ;main.c: 47:                     if (mins > 59) {
   541   0007AE  BE17               	btfsc	(_mins+1)^0,7,c
   542   0007B0  EFE3  F003         	goto	u781
   543   0007B4  5017               	movf	(_mins+1)^0,w,c
   544   0007B6  E109               	bnz	u780
   545   0007B8  0E3C               	movlw	60
   546   0007BA  5C16               	subwf	_mins^0,w,c
   547   0007BC  A0D8               	btfss	status,0,c
   548   0007BE  EFE3  F003         	goto	u781
   549   0007C2  EFE5  F003         	goto	u780
   550   0007C6                     u781:
   551   0007C6  EF04  F005         	goto	l80
   552   0007CA                     u780:
   553   0007CA                     
   554                           ;main.c: 48:                         mins = 0;
   555   0007CA  0E00               	movlw	0
   556   0007CC  6E17               	movwf	(_mins+1)^0,c
   557   0007CE  0E00               	movlw	0
   558   0007D0  6E16               	movwf	_mins^0,c
   559   0007D2  EF04  F005         	goto	l80
   560   0007D6                     l1225:
   561   0007D6  0E0D               	movlw	13
   562   0007D8  1810               	xorwf	main@key^0,w,c
   563   0007DA  1011               	iorwf	(main@key+1)^0,w,c
   564   0007DC  A4D8               	btfss	status,2,c
   565   0007DE  EFF3  F003         	goto	u791
   566   0007E2  EFF5  F003         	goto	u790
   567   0007E6                     u791:
   568   0007E6  EF04  F005         	goto	l80
   569   0007EA                     u790:
   570   0007EA                     
   571                           ;main.c: 52:                     mins--;
   572   0007EA  0616               	decf	_mins^0,f,c
   573   0007EC  A0D8               	btfss	status,0,c
   574   0007EE  0617               	decf	(_mins+1)^0,f,c
   575   0007F0                     
   576                           ;main.c: 53:                     if (mins < 0) {
   577   0007F0  BE17               	btfsc	(_mins+1)^0,7,c
   578   0007F2  EFFF  F003         	goto	u800
   579   0007F6  EFFD  F003         	goto	u801
   580   0007FA                     u801:
   581   0007FA  EF05  F004         	goto	l67
   582   0007FE                     u800:
   583   0007FE                     
   584                           ;main.c: 54:                         mins = 59;
   585   0007FE  0E00               	movlw	0
   586   000800  6E17               	movwf	(_mins+1)^0,c
   587   000802  0E3B               	movlw	59
   588   000804  6E16               	movwf	_mins^0,c
   589   000806  EF04  F005         	goto	l80
   590   00080A                     l67:
   591                           
   592                           ;main.c: 57:             } else if (select_flag == 1) {
   593   00080A  EF04  F005         	goto	l80
   594   00080E                     l1233:
   595   00080E  040C               	decf	main@select_flag^0,w,c
   596   000810  100D               	iorwf	(main@select_flag+1)^0,w,c
   597   000812  A4D8               	btfss	status,2,c
   598   000814  EF0E  F004         	goto	u811
   599   000818  EF10  F004         	goto	u810
   600   00081C                     u811:
   601   00081C  EF04  F005         	goto	l80
   602   000820                     u810:
   603   000820                     
   604                           ;main.c: 58:                 ssd[2] = digit[mins / 10];
   605   000820  C016  F001         	movff	_mins,___awdiv@dividend
   606   000824  C017  F002         	movff	_mins+1,___awdiv@dividend+1
   607   000828  0E00               	movlw	0
   608   00082A  6E04               	movwf	(___awdiv@divisor+1)^0,c
   609   00082C  0E0A               	movlw	10
   610   00082E  6E03               	movwf	___awdiv@divisor^0,c
   611   000830  EC0C  F005         	call	___awdiv	;wreg free
   612   000834  5001               	movf	?___awdiv^0,w,c
   613   000836  0F1E               	addlw	low _digit
   614   000838  6ED9               	movwf	fsr2l,c
   615   00083A  6ADA               	clrf	fsr2h,c
   616   00083C  50DF               	movf	indf2,w,c
   617   00083E  6E1C               	movwf	(_ssd+2)^0,c
   618                           
   619                           ;main.c: 59:                 ssd[3] = digit[mins % 10];
   620   000840  C016  F001         	movff	_mins,___awmod@dividend
   621   000844  C017  F002         	movff	_mins+1,___awmod@dividend+1
   622   000848  0E00               	movlw	0
   623   00084A  6E04               	movwf	(___awmod@divisor+1)^0,c
   624   00084C  0E0A               	movlw	10
   625   00084E  6E03               	movwf	___awmod@divisor^0,c
   626   000850  EC6E  F005         	call	___awmod	;wreg free
   627   000854  5001               	movf	?___awmod^0,w,c
   628   000856  0F1E               	addlw	low _digit
   629   000858  6ED9               	movwf	fsr2l,c
   630   00085A  6ADA               	clrf	fsr2h,c
   631   00085C  50DF               	movf	indf2,w,c
   632   00085E  6E1D               	movwf	(_ssd+3)^0,c
   633   000860                     
   634                           ;main.c: 60:                 if (wait++ == 100)
   635   000860  4A0E               	infsnz	main@wait^0,f,c
   636   000862  2A0F               	incf	(main@wait+1)^0,f,c
   637   000864  0E65               	movlw	101
   638   000866  180E               	xorwf	main@wait^0,w,c
   639   000868  100F               	iorwf	(main@wait+1)^0,w,c
   640   00086A  A4D8               	btfss	status,2,c
   641   00086C  EF3A  F004         	goto	u821
   642   000870  EF3C  F004         	goto	u820
   643   000874                     u821:
   644   000874  EF5E  F004         	goto	l1241
   645   000878                     u820:
   646   000878                     
   647                           ;main.c: 61:                 {;main.c: 62:                     ssd[0] = digit[hours / 10
      +                          ];
   648   000878  C018  F001         	movff	_hours,___awdiv@dividend
   649   00087C  C019  F002         	movff	_hours+1,___awdiv@dividend+1
   650   000880  0E00               	movlw	0
   651   000882  6E04               	movwf	(___awdiv@divisor+1)^0,c
   652   000884  0E0A               	movlw	10
   653   000886  6E03               	movwf	___awdiv@divisor^0,c
   654   000888  EC0C  F005         	call	___awdiv	;wreg free
   655   00088C  5001               	movf	?___awdiv^0,w,c
   656   00088E  0F1E               	addlw	low _digit
   657   000890  6ED9               	movwf	fsr2l,c
   658   000892  6ADA               	clrf	fsr2h,c
   659   000894  50DF               	movf	indf2,w,c
   660   000896  6E1A               	movwf	_ssd^0,c
   661                           
   662                           ;main.c: 63:                     ssd[1] = digit[(hours % 10)];
   663   000898  C018  F001         	movff	_hours,___awmod@dividend
   664   00089C  C019  F002         	movff	_hours+1,___awmod@dividend+1
   665   0008A0  0E00               	movlw	0
   666   0008A2  6E04               	movwf	(___awmod@divisor+1)^0,c
   667   0008A4  0E0A               	movlw	10
   668   0008A6  6E03               	movwf	___awmod@divisor^0,c
   669   0008A8  EC6E  F005         	call	___awmod	;wreg free
   670   0008AC  5001               	movf	?___awmod^0,w,c
   671   0008AE  0F1E               	addlw	low _digit
   672   0008B0  6ED9               	movwf	fsr2l,c
   673   0008B2  6ADA               	clrf	fsr2h,c
   674   0008B4  50DF               	movf	indf2,w,c
   675   0008B6  6E1B               	movwf	(_ssd+1)^0,c
   676                           
   677                           ;main.c: 64:                 } else if (wait == 200) {
   678   0008B8  EF70  F004         	goto	l1245
   679   0008BC                     l1241:
   680   0008BC  0EC8               	movlw	200
   681   0008BE  180E               	xorwf	main@wait^0,w,c
   682   0008C0  100F               	iorwf	(main@wait+1)^0,w,c
   683   0008C2  A4D8               	btfss	status,2,c
   684   0008C4  EF66  F004         	goto	u831
   685   0008C8  EF68  F004         	goto	u830
   686   0008CC                     u831:
   687   0008CC  EF70  F004         	goto	l1245
   688   0008D0                     u830:
   689   0008D0                     
   690                           ;main.c: 65:                     wait = 0;
   691   0008D0  0E00               	movlw	0
   692   0008D2  6E0F               	movwf	(main@wait+1)^0,c
   693   0008D4  0E00               	movlw	0
   694   0008D6  6E0E               	movwf	main@wait^0,c
   695                           
   696                           ;main.c: 66:                     ssd[0] = 0x40;
   697   0008D8  0E40               	movlw	64
   698   0008DA  6E1A               	movwf	_ssd^0,c
   699                           
   700                           ;main.c: 67:                     ssd[1] = 0x40;
   701   0008DC  0E40               	movlw	64
   702   0008DE  6E1B               	movwf	(_ssd+1)^0,c
   703   0008E0                     l1245:
   704                           
   705                           ;main.c: 69:                 if (key == 0x0E) {
   706   0008E0  0E0E               	movlw	14
   707   0008E2  1810               	xorwf	main@key^0,w,c
   708   0008E4  1011               	iorwf	(main@key+1)^0,w,c
   709   0008E6  A4D8               	btfss	status,2,c
   710   0008E8  EF78  F004         	goto	u841
   711   0008EC  EF7A  F004         	goto	u840
   712   0008F0                     u841:
   713   0008F0  EF90  F004         	goto	l1253
   714   0008F4                     u840:
   715   0008F4                     
   716                           ;main.c: 70:                     hours++;
   717   0008F4  4A18               	infsnz	_hours^0,f,c
   718   0008F6  2A19               	incf	(_hours+1)^0,f,c
   719   0008F8                     
   720                           ;main.c: 71:                     if (hours > 23) {
   721   0008F8  BE19               	btfsc	(_hours+1)^0,7,c
   722   0008FA  EF88  F004         	goto	u851
   723   0008FE  5019               	movf	(_hours+1)^0,w,c
   724   000900  E109               	bnz	u850
   725   000902  0E18               	movlw	24
   726   000904  5C18               	subwf	_hours^0,w,c
   727   000906  A0D8               	btfss	status,0,c
   728   000908  EF88  F004         	goto	u851
   729   00090C  EF8A  F004         	goto	u850
   730   000910                     u851:
   731   000910  EF04  F005         	goto	l80
   732   000914                     u850:
   733   000914                     
   734                           ;main.c: 72:                         hours = 0;
   735   000914  0E00               	movlw	0
   736   000916  6E19               	movwf	(_hours+1)^0,c
   737   000918  0E00               	movlw	0
   738   00091A  6E18               	movwf	_hours^0,c
   739   00091C  EF04  F005         	goto	l80
   740   000920                     l1253:
   741   000920  0E0D               	movlw	13
   742   000922  1810               	xorwf	main@key^0,w,c
   743   000924  1011               	iorwf	(main@key+1)^0,w,c
   744   000926  A4D8               	btfss	status,2,c
   745   000928  EF98  F004         	goto	u861
   746   00092C  EF9A  F004         	goto	u860
   747   000930                     u861:
   748   000930  EF04  F005         	goto	l80
   749   000934                     u860:
   750   000934                     
   751                           ;main.c: 75:                     hours--;
   752   000934  0618               	decf	_hours^0,f,c
   753   000936  A0D8               	btfss	status,0,c
   754   000938  0619               	decf	(_hours+1)^0,f,c
   755   00093A                     
   756                           ;main.c: 76:                     if (hours < 0) {
   757   00093A  BE19               	btfsc	(_hours+1)^0,7,c
   758   00093C  EFA4  F004         	goto	u870
   759   000940  EFA2  F004         	goto	u871
   760   000944                     u871:
   761   000944  EF05  F004         	goto	l67
   762   000948                     u870:
   763   000948                     
   764                           ;main.c: 77:                         hours = 23;
   765   000948  0E00               	movlw	0
   766   00094A  6E19               	movwf	(_hours+1)^0,c
   767   00094C  0E17               	movlw	23
   768   00094E  6E18               	movwf	_hours^0,c
   769   000950  EF04  F005         	goto	l80
   770   000954                     l59:
   771                           
   772                           ;main.c: 82:             if (sec % 2 == 0) {
   773   000954  B014               	btfsc	_sec^0,0,c
   774   000956  EFAF  F004         	goto	u881
   775   00095A  EFB1  F004         	goto	u880
   776   00095E                     u881:
   777   00095E  EFC4  F004         	goto	l1265
   778   000962                     u880:
   779   000962                     
   780                           ;main.c: 84:                 ssd[1] = digit[(hours % 10)] | 0x10;
   781   000962  C018  F001         	movff	_hours,___awmod@dividend
   782   000966  C019  F002         	movff	_hours+1,___awmod@dividend+1
   783   00096A  0E00               	movlw	0
   784   00096C  6E04               	movwf	(___awmod@divisor+1)^0,c
   785   00096E  0E0A               	movlw	10
   786   000970  6E03               	movwf	___awmod@divisor^0,c
   787   000972  EC6E  F005         	call	___awmod	;wreg free
   788   000976  5001               	movf	?___awmod^0,w,c
   789   000978  0F1E               	addlw	low _digit
   790   00097A  6ED9               	movwf	fsr2l,c
   791   00097C  6ADA               	clrf	fsr2h,c
   792   00097E  50DF               	movf	indf2,w,c
   793   000980  0910               	iorlw	16
   794   000982  6E1B               	movwf	(_ssd+1)^0,c
   795                           
   796                           ;main.c: 85:             } else {
   797   000984  EFD4  F004         	goto	l82
   798   000988                     l1265:
   799                           
   800                           ;main.c: 86:                 ssd[1] = digit[hours % 10];
   801   000988  C018  F001         	movff	_hours,___awmod@dividend
   802   00098C  C019  F002         	movff	_hours+1,___awmod@dividend+1
   803   000990  0E00               	movlw	0
   804   000992  6E04               	movwf	(___awmod@divisor+1)^0,c
   805   000994  0E0A               	movlw	10
   806   000996  6E03               	movwf	___awmod@divisor^0,c
   807   000998  EC6E  F005         	call	___awmod	;wreg free
   808   00099C  5001               	movf	?___awmod^0,w,c
   809   00099E  0F1E               	addlw	low _digit
   810   0009A0  6ED9               	movwf	fsr2l,c
   811   0009A2  6ADA               	clrf	fsr2h,c
   812   0009A4  50DF               	movf	indf2,w,c
   813   0009A6  6E1B               	movwf	(_ssd+1)^0,c
   814   0009A8                     l82:
   815                           
   816                           ;main.c: 88:             ssd[0] = digit[hours / 10];
   817   0009A8  C018  F001         	movff	_hours,___awdiv@dividend
   818   0009AC  C019  F002         	movff	_hours+1,___awdiv@dividend+1
   819   0009B0  0E00               	movlw	0
   820   0009B2  6E04               	movwf	(___awdiv@divisor+1)^0,c
   821   0009B4  0E0A               	movlw	10
   822   0009B6  6E03               	movwf	___awdiv@divisor^0,c
   823   0009B8  EC0C  F005         	call	___awdiv	;wreg free
   824   0009BC  5001               	movf	?___awdiv^0,w,c
   825   0009BE  0F1E               	addlw	low _digit
   826   0009C0  6ED9               	movwf	fsr2l,c
   827   0009C2  6ADA               	clrf	fsr2h,c
   828   0009C4  50DF               	movf	indf2,w,c
   829   0009C6  6E1A               	movwf	_ssd^0,c
   830                           
   831                           ;main.c: 89:             ssd[2] = digit[mins / 10];
   832   0009C8  C016  F001         	movff	_mins,___awdiv@dividend
   833   0009CC  C017  F002         	movff	_mins+1,___awdiv@dividend+1
   834   0009D0  0E00               	movlw	0
   835   0009D2  6E04               	movwf	(___awdiv@divisor+1)^0,c
   836   0009D4  0E0A               	movlw	10
   837   0009D6  6E03               	movwf	___awdiv@divisor^0,c
   838   0009D8  EC0C  F005         	call	___awdiv	;wreg free
   839   0009DC  5001               	movf	?___awdiv^0,w,c
   840   0009DE  0F1E               	addlw	low _digit
   841   0009E0  6ED9               	movwf	fsr2l,c
   842   0009E2  6ADA               	clrf	fsr2h,c
   843   0009E4  50DF               	movf	indf2,w,c
   844   0009E6  6E1C               	movwf	(_ssd+2)^0,c
   845                           
   846                           ;main.c: 90:             ssd[3] = digit[mins % 10];
   847   0009E8  C016  F001         	movff	_mins,___awmod@dividend
   848   0009EC  C017  F002         	movff	_mins+1,___awmod@dividend+1
   849   0009F0  0E00               	movlw	0
   850   0009F2  6E04               	movwf	(___awmod@divisor+1)^0,c
   851   0009F4  0E0A               	movlw	10
   852   0009F6  6E03               	movwf	___awmod@divisor^0,c
   853   0009F8  EC6E  F005         	call	___awmod	;wreg free
   854   0009FC  5001               	movf	?___awmod^0,w,c
   855   0009FE  0F1E               	addlw	low _digit
   856   000A00  6ED9               	movwf	fsr2l,c
   857   000A02  6ADA               	clrf	fsr2h,c
   858   000A04  50DF               	movf	indf2,w,c
   859   000A06  6E1D               	movwf	(_ssd+3)^0,c
   860   000A08                     l80:
   861                           
   862                           ;main.c: 92:         display(ssd);
   863   000A08  0E1A               	movlw	low _ssd
   864   000A0A  6E01               	movwf	display@data^0,c
   865   000A0C  EC58  F006         	call	_display	;wreg free
   866   000A10  EF0F  F003         	goto	l1187
   867   000A14  EF07  F000         	goto	start
   868   000A18                     __end_of_main:
   869                           	callstack 0
   870                           
   871 ;; *************** function _read_digital_keypad *****************
   872 ;; Defined at:
   873 ;;		line 130 in file "main.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  detection_ty    1    wreg     unsigned char 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;  detection_ty    1    0[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      unsigned char 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   887 ;;      Params:         0       0       0       0       0       0       0
   888 ;;      Locals:         1       0       0       0       0       0       0
   889 ;;      Temps:          0       0       0       0       0       0       0
   890 ;;      Totals:         1       0       0       0       0       0       0
   891 ;;Total ram usage:        1 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; Hardware stack levels required when called: 1
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text1
   902   000C3A                     __ptext1:
   903                           	callstack 0
   904   000C3A                     _read_digital_keypad:
   905                           	callstack 29
   906                           
   907                           ;incstack = 0
   908                           ;read_digital_keypad@detection_type stored from wreg
   909   000C3A  6E01               	movwf	read_digital_keypad@detection_type^0,c
   910   000C3C                     
   911                           ;main.c: 131:     static unsigned char once = 1;;main.c: 133:     if (detection_type == 
      +                          1) {
   912   000C3C  0401               	decf	read_digital_keypad@detection_type^0,w,c
   913   000C3E  A4D8               	btfss	status,2,c
   914   000C40  EF24  F006         	goto	u11
   915   000C44  EF26  F006         	goto	u10
   916   000C48                     u11:
   917   000C48  EF4C  F006         	goto	l869
   918   000C4C                     u10:
   919   000C4C                     
   920                           ;main.c: 134:         if (((PORTC & 0x0F) != 0x0F) && once) {
   921   000C4C  5082               	movf	130,w,c	;volatile
   922   000C4E  0B0F               	andlw	15
   923   000C50  0A0F               	xorlw	15
   924   000C52  B4D8               	btfsc	status,2,c
   925   000C54  EF2E  F006         	goto	u21
   926   000C58  EF30  F006         	goto	u20
   927   000C5C                     u21:
   928   000C5C  EF3E  F006         	goto	l865
   929   000C60                     u20:
   930   000C60  5028               	movf	read_digital_keypad@once^0,w,c
   931   000C62  B4D8               	btfsc	status,2,c
   932   000C64  EF36  F006         	goto	u31
   933   000C68  EF38  F006         	goto	u30
   934   000C6C                     u31:
   935   000C6C  EF3E  F006         	goto	l865
   936   000C70                     u30:
   937   000C70                     
   938                           ;main.c: 135:             once = 0;
   939   000C70  0E00               	movlw	0
   940   000C72  6E28               	movwf	read_digital_keypad@once^0,c
   941   000C74                     l859:
   942                           
   943                           ;main.c: 137:             return (PORTC & 0x0F);
   944   000C74  5082               	movf	130,w,c	;volatile
   945   000C76  0B0F               	andlw	15
   946   000C78  EF57  F006         	goto	l98
   947   000C7C                     l865:
   948   000C7C  5082               	movf	130,w,c	;volatile
   949   000C7E  0B0F               	andlw	15
   950   000C80  0A0F               	xorlw	15
   951   000C82  A4D8               	btfss	status,2,c
   952   000C84  EF46  F006         	goto	u41
   953   000C88  EF48  F006         	goto	u40
   954   000C8C                     u41:
   955   000C8C  EF56  F006         	goto	l875
   956   000C90                     u40:
   957   000C90                     
   958                           ;main.c: 139:             once = 1;
   959   000C90  0E01               	movlw	1
   960   000C92  6E28               	movwf	read_digital_keypad@once^0,c
   961   000C94  EF56  F006         	goto	l875
   962   000C98                     l869:
   963   000C98  5001               	movf	read_digital_keypad@detection_type^0,w,c
   964   000C9A  A4D8               	btfss	status,2,c
   965   000C9C  EF52  F006         	goto	u51
   966   000CA0  EF54  F006         	goto	u50
   967   000CA4                     u51:
   968   000CA4  EF56  F006         	goto	l875
   969   000CA8                     u50:
   970   000CA8  EF3A  F006         	goto	l859
   971   000CAC                     l875:
   972                           
   973                           ;main.c: 144:     return 0xFF;
   974   000CAC  0EFF               	movlw	255
   975   000CAE                     l98:
   976   000CAE  0012               	return		;funcret
   977   000CB0                     __end_of_read_digital_keypad:
   978                           	callstack 0
   979                           
   980 ;; *************** function _init_config *****************
   981 ;; Defined at:
   982 ;;		line 96 in file "main.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   996 ;;      Params:         0       0       0       0       0       0       0
   997 ;;      Locals:         0       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0
   999 ;;      Totals:         0       0       0       0       0       0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; Hardware stack levels required when called: 2
  1003 ;; This function calls:
  1004 ;;		_init_ssd_control
  1005 ;;		_init_timer0
  1006 ;; This function is called by:
  1007 ;;		_main
  1008 ;; This function uses a non-reentrant model
  1009 ;;
  1010                           
  1011                           	psect	text2
  1012   000D4C                     __ptext2:
  1013                           	callstack 0
  1014   000D4C                     _init_config:
  1015                           	callstack 28
  1016   000D4C                     
  1017                           ;main.c: 98:     init_ssd_control();
  1018   000D4C  ECC7  F006         	call	_init_ssd_control	;wreg free
  1019   000D50                     
  1020                           ;main.c: 99:     init_timer0();
  1021   000D50  ECB8  F006         	call	_init_timer0	;wreg free
  1022   000D54                     
  1023                           ;main.c: 100:     TRISD = 0x00;
  1024   000D54  0E00               	movlw	0
  1025   000D56  6E95               	movwf	149,c	;volatile
  1026                           
  1027                           ;main.c: 101:     TRISA = TRISA & 0xF0;
  1028   000D58  5092               	movf	146,w,c	;volatile
  1029   000D5A  0BF0               	andlw	240
  1030   000D5C  6E92               	movwf	146,c	;volatile
  1031                           
  1032                           ;main.c: 102:     PORTA = PORTA & 0xF0;
  1033   000D5E  5080               	movf	128,w,c	;volatile
  1034   000D60  0BF0               	andlw	240
  1035   000D62  6E80               	movwf	128,c	;volatile
  1036   000D64                     
  1037                           ;main.c: 103:     PORTD = 0x00;
  1038   000D64  0E00               	movlw	0
  1039   000D66  6E83               	movwf	131,c	;volatile
  1040   000D68                     
  1041                           ;main.c: 104:     TRISC = TRISC | 0x0F;
  1042   000D68  5094               	movf	148,w,c	;volatile
  1043   000D6A  090F               	iorlw	15
  1044   000D6C  6E94               	movwf	148,c	;volatile
  1045   000D6E  0012               	return		;funcret
  1046   000D70                     __end_of_init_config:
  1047                           	callstack 0
  1048                           
  1049 ;; *************** function _init_timer0 *****************
  1050 ;; Defined at:
  1051 ;;		line 107 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1065 ;;      Params:         0       0       0       0       0       0       0
  1066 ;;      Locals:         0       0       0       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0       0       0
  1068 ;;      Totals:         0       0       0       0       0       0       0
  1069 ;;Total ram usage:        0 bytes
  1070 ;; Hardware stack levels used: 1
  1071 ;; Hardware stack levels required when called: 1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_init_config
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text3
  1080   000D70                     __ptext3:
  1081                           	callstack 0
  1082   000D70                     _init_timer0:
  1083                           	callstack 28
  1084   000D70                     
  1085                           ;main.c: 108:     PEIE = 1;
  1086   000D70  8CF2               	bsf	4082,6,c	;volatile
  1087   000D72                     
  1088                           ;main.c: 109:     ADCON1 = 0x0F;
  1089   000D72  0E0F               	movlw	15
  1090   000D74  6EC1               	movwf	193,c	;volatile
  1091   000D76                     
  1092                           ;main.c: 110:     T08BIT = 1;
  1093   000D76  8CD5               	bsf	4053,6,c	;volatile
  1094   000D78                     
  1095                           ;main.c: 113:     T0CS = 0;
  1096   000D78  9AD5               	bcf	4053,5,c	;volatile
  1097   000D7A                     
  1098                           ;main.c: 116:     TMR0ON = 1;
  1099   000D7A  8ED5               	bsf	4053,7,c	;volatile
  1100   000D7C                     
  1101                           ;main.c: 119:     PSA = 1;
  1102   000D7C  86D5               	bsf	4053,3,c	;volatile
  1103                           
  1104                           ;main.c: 121:     TMR0 = 6;
  1105   000D7E  0E00               	movlw	0
  1106   000D80  6ED7               	movwf	215,c	;volatile
  1107   000D82  0E06               	movlw	6
  1108   000D84  6ED6               	movwf	214,c	;volatile
  1109   000D86                     
  1110                           ;main.c: 124:     TMR0IF = 0;
  1111   000D86  94F2               	bcf	4082,2,c	;volatile
  1112   000D88                     
  1113                           ;main.c: 127:     TMR0IE = 1;
  1114   000D88  8AF2               	bsf	4082,5,c	;volatile
  1115   000D8A                     
  1116                           ;main.c: 128:     GIE = 1;
  1117   000D8A  8EF2               	bsf	4082,7,c	;volatile
  1118   000D8C  0012               	return		;funcret
  1119   000D8E                     __end_of_init_timer0:
  1120                           	callstack 0
  1121                           
  1122 ;; *************** function _init_ssd_control *****************
  1123 ;; Defined at:
  1124 ;;		line 5 in file "ssd.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, status,2, status,0
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1138 ;;      Params:         0       0       0       0       0       0       0
  1139 ;;      Locals:         0       0       0       0       0       0       0
  1140 ;;      Temps:          0       0       0       0       0       0       0
  1141 ;;      Totals:         0       0       0       0       0       0       0
  1142 ;;Total ram usage:        0 bytes
  1143 ;; Hardware stack levels used: 1
  1144 ;; Hardware stack levels required when called: 1
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_init_config
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text4
  1153   000D8E                     __ptext4:
  1154                           	callstack 0
  1155   000D8E                     _init_ssd_control:
  1156                           	callstack 28
  1157   000D8E                     
  1158                           ;ssd.c: 7:     TRISD = 0x00;
  1159   000D8E  0E00               	movlw	0
  1160   000D90  6E95               	movwf	149,c	;volatile
  1161   000D92                     
  1162                           ;ssd.c: 9:     TRISA = TRISA & 0xF0;
  1163   000D92  5092               	movf	146,w,c	;volatile
  1164   000D94  0BF0               	andlw	240
  1165   000D96  6E92               	movwf	146,c	;volatile
  1166   000D98                     
  1167                           ;ssd.c: 12:     PORTA = PORTA & 0xF0;
  1168   000D98  5080               	movf	128,w,c	;volatile
  1169   000D9A  0BF0               	andlw	240
  1170   000D9C  6E80               	movwf	128,c	;volatile
  1171   000D9E  0012               	return		;funcret
  1172   000DA0                     __end_of_init_ssd_control:
  1173                           	callstack 0
  1174                           
  1175 ;; *************** function _display *****************
  1176 ;; Defined at:
  1177 ;;		line 15 in file "ssd.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  data            1    0[COMRAM] PTR unsigned char 
  1180 ;;		 -> ssd(4), 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  wait            2    3[COMRAM] unsigned int 
  1183 ;;  digit           1    5[COMRAM] unsigned char 
  1184 ;;  data_bit        1    0        unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1194 ;;      Params:         1       0       0       0       0       0       0
  1195 ;;      Locals:         3       0       0       0       0       0       0
  1196 ;;      Temps:          2       0       0       0       0       0       0
  1197 ;;      Totals:         6       0       0       0       0       0       0
  1198 ;;Total ram usage:        6 bytes
  1199 ;; Hardware stack levels used: 1
  1200 ;; Hardware stack levels required when called: 1
  1201 ;; This function calls:
  1202 ;;		Nothing
  1203 ;; This function is called by:
  1204 ;;		_main
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text5
  1209   000CB0                     __ptext5:
  1210                           	callstack 0
  1211   000CB0                     _display:
  1212                           	callstack 29
  1213   000CB0                     
  1214                           ;ssd.c: 16:     unsigned int wait;;ssd.c: 17:     unsigned char data_bit;;ssd.c: 18:    
      +                           unsigned char digit;;ssd.c: 20:     for (digit = 0; digit < 4; digit++) {
  1215   000CB0  0E00               	movlw	0
  1216   000CB2  6E06               	movwf	display@digit^0,c
  1217   000CB4                     l1091:
  1218                           
  1219                           ;ssd.c: 21:         PORTD = data[digit];
  1220   000CB4  5001               	movf	display@data^0,w,c
  1221   000CB6  2406               	addwf	display@digit^0,w,c
  1222   000CB8  6ED9               	movwf	fsr2l,c
  1223   000CBA  6ADA               	clrf	fsr2h,c
  1224   000CBC  50DF               	movf	indf2,w,c
  1225   000CBE  6E83               	movwf	131,c	;volatile
  1226   000CC0                     
  1227                           ;ssd.c: 22:         PORTA = (PORTA & 0xF0) | (0x01 << digit);
  1228   000CC0  C006  F002         	movff	display@digit,??_display
  1229   000CC4  0E01               	movlw	1
  1230   000CC6  6E03               	movwf	(??_display+1)^0,c
  1231   000CC8  2A02               	incf	??_display^0,f,c
  1232   000CCA  EF69  F006         	goto	u504
  1233   000CCE                     u505:
  1234   000CCE  90D8               	bcf	status,0,c
  1235   000CD0  3603               	rlcf	(??_display+1)^0,f,c
  1236   000CD2                     u504:
  1237   000CD2  2E02               	decfsz	??_display^0,f,c
  1238   000CD4  EF67  F006         	goto	u505
  1239   000CD8  5080               	movf	128,w,c	;volatile
  1240   000CDA  0BF0               	andlw	240
  1241   000CDC  1003               	iorwf	(??_display+1)^0,w,c
  1242   000CDE  6E80               	movwf	128,c	;volatile
  1243   000CE0                     
  1244                           ;ssd.c: 24:         for (wait = 1000; wait--;);
  1245   000CE0  0E03               	movlw	3
  1246   000CE2  6E05               	movwf	(display@wait+1)^0,c
  1247   000CE4  0EE8               	movlw	232
  1248   000CE6  6E04               	movwf	display@wait^0,c
  1249   000CE8                     l1097:
  1250   000CE8  0604               	decf	display@wait^0,f,c
  1251   000CEA  A0D8               	btfss	status,0,c
  1252   000CEC  0605               	decf	(display@wait+1)^0,f,c
  1253   000CEE  2804               	incf	display@wait^0,w,c
  1254   000CF0  E106               	bnz	u511
  1255   000CF2  2805               	incf	(display@wait+1)^0,w,c
  1256   000CF4  A4D8               	btfss	status,2,c
  1257   000CF6  EF7F  F006         	goto	u511
  1258   000CFA  EF81  F006         	goto	u510
  1259   000CFE                     u511:
  1260   000CFE  EF74  F006         	goto	l1097
  1261   000D02                     u510:
  1262   000D02                     
  1263                           ;ssd.c: 25:     }
  1264   000D02  2A06               	incf	display@digit^0,f,c
  1265   000D04  0E03               	movlw	3
  1266   000D06  6406               	cpfsgt	display@digit^0,c
  1267   000D08  EF88  F006         	goto	u521
  1268   000D0C  EF8A  F006         	goto	u520
  1269   000D10                     u521:
  1270   000D10  EF5A  F006         	goto	l1091
  1271   000D14                     u520:
  1272   000D14  0012               	return		;funcret
  1273   000D16                     __end_of_display:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function ___awmod *****************
  1277 ;; Defined at:
  1278 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  dividend        2    0[COMRAM] int 
  1281 ;;  divisor         2    2[COMRAM] int 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  sign            1    5[COMRAM] unsigned char 
  1284 ;;  counter         1    4[COMRAM] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  2    0[COMRAM] int 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1294 ;;      Params:         4       0       0       0       0       0       0
  1295 ;;      Locals:         2       0       0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0       0       0
  1297 ;;      Totals:         6       0       0       0       0       0       0
  1298 ;;Total ram usage:        6 bytes
  1299 ;; Hardware stack levels used: 1
  1300 ;; Hardware stack levels required when called: 1
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text6
  1309   000ADC                     __ptext6:
  1310                           	callstack 0
  1311   000ADC                     ___awmod:
  1312                           	callstack 29
  1313   000ADC  0E00               	movlw	0
  1314   000ADE  6E06               	movwf	___awmod@sign^0,c
  1315   000AE0  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1316   000AE2  EF77  F005         	goto	u590
  1317   000AE6  EF75  F005         	goto	u591
  1318   000AEA                     u591:
  1319   000AEA  EF7D  F005         	goto	l1155
  1320   000AEE                     u590:
  1321   000AEE  6C01               	negf	___awmod@dividend^0,c
  1322   000AF0  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1323   000AF2  B0D8               	btfsc	status,0,c
  1324   000AF4  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1325   000AF6  0E01               	movlw	1
  1326   000AF8  6E06               	movwf	___awmod@sign^0,c
  1327   000AFA                     l1155:
  1328   000AFA  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1329   000AFC  EF84  F005         	goto	u600
  1330   000B00  EF82  F005         	goto	u601
  1331   000B04                     u601:
  1332   000B04  EF88  F005         	goto	l1159
  1333   000B08                     u600:
  1334   000B08  6C03               	negf	___awmod@divisor^0,c
  1335   000B0A  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1336   000B0C  B0D8               	btfsc	status,0,c
  1337   000B0E  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1338   000B10                     l1159:
  1339   000B10  5003               	movf	___awmod@divisor^0,w,c
  1340   000B12  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1341   000B14  B4D8               	btfsc	status,2,c
  1342   000B16  EF8F  F005         	goto	u611
  1343   000B1A  EF91  F005         	goto	u610
  1344   000B1E                     u611:
  1345   000B1E  EFB5  F005         	goto	l1175
  1346   000B22                     u610:
  1347   000B22  0E01               	movlw	1
  1348   000B24  6E05               	movwf	___awmod@counter^0,c
  1349   000B26  EF99  F005         	goto	l1165
  1350   000B2A                     l1163:
  1351   000B2A  90D8               	bcf	status,0,c
  1352   000B2C  3603               	rlcf	___awmod@divisor^0,f,c
  1353   000B2E  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1354   000B30  2A05               	incf	___awmod@counter^0,f,c
  1355   000B32                     l1165:
  1356   000B32  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1357   000B34  EF9E  F005         	goto	u621
  1358   000B38  EFA0  F005         	goto	u620
  1359   000B3C                     u621:
  1360   000B3C  EF95  F005         	goto	l1163
  1361   000B40                     u620:
  1362   000B40                     l1167:
  1363   000B40  5003               	movf	___awmod@divisor^0,w,c
  1364   000B42  5C01               	subwf	___awmod@dividend^0,w,c
  1365   000B44  5004               	movf	(___awmod@divisor+1)^0,w,c
  1366   000B46  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1367   000B48  A0D8               	btfss	status,0,c
  1368   000B4A  EFA9  F005         	goto	u631
  1369   000B4E  EFAB  F005         	goto	u630
  1370   000B52                     u631:
  1371   000B52  EFAF  F005         	goto	l1171
  1372   000B56                     u630:
  1373   000B56  5003               	movf	___awmod@divisor^0,w,c
  1374   000B58  5E01               	subwf	___awmod@dividend^0,f,c
  1375   000B5A  5004               	movf	(___awmod@divisor+1)^0,w,c
  1376   000B5C  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1377   000B5E                     l1171:
  1378   000B5E  90D8               	bcf	status,0,c
  1379   000B60  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1380   000B62  3203               	rrcf	___awmod@divisor^0,f,c
  1381   000B64  2E05               	decfsz	___awmod@counter^0,f,c
  1382   000B66  EFA0  F005         	goto	l1167
  1383   000B6A                     l1175:
  1384   000B6A  5006               	movf	___awmod@sign^0,w,c
  1385   000B6C  B4D8               	btfsc	status,2,c
  1386   000B6E  EFBB  F005         	goto	u641
  1387   000B72  EFBD  F005         	goto	u640
  1388   000B76                     u641:
  1389   000B76  EFC1  F005         	goto	l1179
  1390   000B7A                     u640:
  1391   000B7A  6C01               	negf	___awmod@dividend^0,c
  1392   000B7C  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1393   000B7E  B0D8               	btfsc	status,0,c
  1394   000B80  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1395   000B82                     l1179:
  1396   000B82  C001  F001         	movff	___awmod@dividend,?___awmod
  1397   000B86  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1398   000B8A  0012               	return		;funcret
  1399   000B8C                     __end_of___awmod:
  1400                           	callstack 0
  1401                           
  1402 ;; *************** function ___awdiv *****************
  1403 ;; Defined at:
  1404 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  dividend        2    0[COMRAM] int 
  1407 ;;  divisor         2    2[COMRAM] int 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  quotient        2    6[COMRAM] int 
  1410 ;;  sign            1    5[COMRAM] unsigned char 
  1411 ;;  counter         1    4[COMRAM] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  2    0[COMRAM] int 
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1421 ;;      Params:         4       0       0       0       0       0       0
  1422 ;;      Locals:         4       0       0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0
  1424 ;;      Totals:         8       0       0       0       0       0       0
  1425 ;;Total ram usage:        8 bytes
  1426 ;; Hardware stack levels used: 1
  1427 ;; Hardware stack levels required when called: 1
  1428 ;; This function calls:
  1429 ;;		Nothing
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text7
  1436   000A18                     __ptext7:
  1437                           	callstack 0
  1438   000A18                     ___awdiv:
  1439                           	callstack 29
  1440   000A18  0E00               	movlw	0
  1441   000A1A  6E06               	movwf	___awdiv@sign^0,c
  1442   000A1C  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1443   000A1E  EF15  F005         	goto	u530
  1444   000A22  EF13  F005         	goto	u531
  1445   000A26                     u531:
  1446   000A26  EF1B  F005         	goto	l1111
  1447   000A2A                     u530:
  1448   000A2A  6C03               	negf	___awdiv@divisor^0,c
  1449   000A2C  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1450   000A2E  B0D8               	btfsc	status,0,c
  1451   000A30  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1452   000A32  0E01               	movlw	1
  1453   000A34  6E06               	movwf	___awdiv@sign^0,c
  1454   000A36                     l1111:
  1455   000A36  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1456   000A38  EF22  F005         	goto	u540
  1457   000A3C  EF20  F005         	goto	u541
  1458   000A40                     u541:
  1459   000A40  EF28  F005         	goto	l1117
  1460   000A44                     u540:
  1461   000A44  6C01               	negf	___awdiv@dividend^0,c
  1462   000A46  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1463   000A48  B0D8               	btfsc	status,0,c
  1464   000A4A  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1465   000A4C  0E01               	movlw	1
  1466   000A4E  1A06               	xorwf	___awdiv@sign^0,f,c
  1467   000A50                     l1117:
  1468   000A50  0E00               	movlw	0
  1469   000A52  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1470   000A54  0E00               	movlw	0
  1471   000A56  6E07               	movwf	___awdiv@quotient^0,c
  1472   000A58  5003               	movf	___awdiv@divisor^0,w,c
  1473   000A5A  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1474   000A5C  B4D8               	btfsc	status,2,c
  1475   000A5E  EF33  F005         	goto	u551
  1476   000A62  EF35  F005         	goto	u550
  1477   000A66                     u551:
  1478   000A66  EF5D  F005         	goto	l1139
  1479   000A6A                     u550:
  1480   000A6A  0E01               	movlw	1
  1481   000A6C  6E05               	movwf	___awdiv@counter^0,c
  1482   000A6E  EF3D  F005         	goto	l1125
  1483   000A72                     l1123:
  1484   000A72  90D8               	bcf	status,0,c
  1485   000A74  3603               	rlcf	___awdiv@divisor^0,f,c
  1486   000A76  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1487   000A78  2A05               	incf	___awdiv@counter^0,f,c
  1488   000A7A                     l1125:
  1489   000A7A  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1490   000A7C  EF42  F005         	goto	u561
  1491   000A80  EF44  F005         	goto	u560
  1492   000A84                     u561:
  1493   000A84  EF39  F005         	goto	l1123
  1494   000A88                     u560:
  1495   000A88                     l1127:
  1496   000A88  90D8               	bcf	status,0,c
  1497   000A8A  3607               	rlcf	___awdiv@quotient^0,f,c
  1498   000A8C  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1499   000A8E  5003               	movf	___awdiv@divisor^0,w,c
  1500   000A90  5C01               	subwf	___awdiv@dividend^0,w,c
  1501   000A92  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1502   000A94  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1503   000A96  A0D8               	btfss	status,0,c
  1504   000A98  EF50  F005         	goto	u571
  1505   000A9C  EF52  F005         	goto	u570
  1506   000AA0                     u571:
  1507   000AA0  EF57  F005         	goto	l1135
  1508   000AA4                     u570:
  1509   000AA4  5003               	movf	___awdiv@divisor^0,w,c
  1510   000AA6  5E01               	subwf	___awdiv@dividend^0,f,c
  1511   000AA8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1512   000AAA  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1513   000AAC  8007               	bsf	___awdiv@quotient^0,0,c
  1514   000AAE                     l1135:
  1515   000AAE  90D8               	bcf	status,0,c
  1516   000AB0  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1517   000AB2  3203               	rrcf	___awdiv@divisor^0,f,c
  1518   000AB4  2E05               	decfsz	___awdiv@counter^0,f,c
  1519   000AB6  EF44  F005         	goto	l1127
  1520   000ABA                     l1139:
  1521   000ABA  5006               	movf	___awdiv@sign^0,w,c
  1522   000ABC  B4D8               	btfsc	status,2,c
  1523   000ABE  EF63  F005         	goto	u581
  1524   000AC2  EF65  F005         	goto	u580
  1525   000AC6                     u581:
  1526   000AC6  EF69  F005         	goto	l1143
  1527   000ACA                     u580:
  1528   000ACA  6C07               	negf	___awdiv@quotient^0,c
  1529   000ACC  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1530   000ACE  B0D8               	btfsc	status,0,c
  1531   000AD0  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1532   000AD2                     l1143:
  1533   000AD2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1534   000AD6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1535   000ADA  0012               	return		;funcret
  1536   000ADC                     __end_of___awdiv:
  1537                           	callstack 0
  1538                           
  1539 ;; *************** function _isr *****************
  1540 ;; Defined at:
  1541 ;;		line 5 in file "isr.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1555 ;;      Params:         0       0       0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used: 1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		Interrupt level 2
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	intcode
  1569   000008                     __pintcode:
  1570                           	callstack 0
  1571   000008                     _isr:
  1572                           	callstack 28
  1573                           
  1574                           ;incstack = 0
  1575   000008  8229               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1576   00000A  EDC6  F005         	call	int_func,f	;refresh shadow registers
  1577                           
  1578                           	psect	intcode_body
  1579   000B8C                     __pintcode_body:
  1580                           	callstack 28
  1581   000B8C                     int_func:
  1582                           	callstack 28
  1583   000B8C  0006               	pop		; remove dummy address from shadow register refresh
  1584   000B8E                     
  1585                           ;isr.c: 6:     static unsigned int count;;isr.c: 7:     if (TMR0IF) {
  1586   000B8E  A4F2               	btfss	4082,2,c	;volatile
  1587   000B90  EFCC  F005         	goto	i2u45_41
  1588   000B94  EFCE  F005         	goto	i2u45_40
  1589   000B98                     i2u45_41:
  1590   000B98  EF1B  F006         	goto	i2l141
  1591   000B9C                     i2u45_40:
  1592   000B9C                     
  1593                           ;isr.c: 8:         if (++count == 20000) {
  1594   000B9C  4A12               	infsnz	isr@count^0,f,c
  1595   000B9E  2A13               	incf	(isr@count+1)^0,f,c
  1596   000BA0  0E20               	movlw	32
  1597   000BA2  1812               	xorwf	isr@count^0,w,c
  1598   000BA4  E107               	bnz	i2u46_41
  1599   000BA6  0E4E               	movlw	78
  1600   000BA8  1813               	xorwf	(isr@count+1)^0,w,c
  1601   000BAA  A4D8               	btfss	status,2,c
  1602   000BAC  EFDA  F005         	goto	i2u46_41
  1603   000BB0  EFDC  F005         	goto	i2u46_40
  1604   000BB4                     i2u46_41:
  1605   000BB4  EF1A  F006         	goto	i2l1083
  1606   000BB8                     i2u46_40:
  1607   000BB8                     
  1608                           ;isr.c: 9:             count = 0;
  1609   000BB8  0E00               	movlw	0
  1610   000BBA  6E13               	movwf	(isr@count+1)^0,c
  1611   000BBC  0E00               	movlw	0
  1612   000BBE  6E12               	movwf	isr@count^0,c
  1613   000BC0                     
  1614                           ;isr.c: 10:             if (++sec == 60) {
  1615   000BC0  4A14               	infsnz	_sec^0,f,c
  1616   000BC2  2A15               	incf	(_sec+1)^0,f,c
  1617   000BC4  0E3C               	movlw	60
  1618   000BC6  1814               	xorwf	_sec^0,w,c
  1619   000BC8  1015               	iorwf	(_sec+1)^0,w,c
  1620   000BCA  A4D8               	btfss	status,2,c
  1621   000BCC  EFEA  F005         	goto	i2u47_41
  1622   000BD0  EFEC  F005         	goto	i2u47_40
  1623   000BD4                     i2u47_41:
  1624   000BD4  EF1A  F006         	goto	i2l1083
  1625   000BD8                     i2u47_40:
  1626   000BD8                     
  1627                           ;isr.c: 11:                 sec = 0;
  1628   000BD8  0E00               	movlw	0
  1629   000BDA  6E15               	movwf	(_sec+1)^0,c
  1630   000BDC  0E00               	movlw	0
  1631   000BDE  6E14               	movwf	_sec^0,c
  1632   000BE0                     
  1633                           ;isr.c: 12:                 mins++;
  1634   000BE0  4A16               	infsnz	_mins^0,f,c
  1635   000BE2  2A17               	incf	(_mins+1)^0,f,c
  1636   000BE4                     
  1637                           ;isr.c: 13:                 if (mins > 59) {
  1638   000BE4  BE17               	btfsc	(_mins+1)^0,7,c
  1639   000BE6  EFFE  F005         	goto	i2u48_41
  1640   000BEA  5017               	movf	(_mins+1)^0,w,c
  1641   000BEC  E109               	bnz	i2u48_40
  1642   000BEE  0E3C               	movlw	60
  1643   000BF0  5C16               	subwf	_mins^0,w,c
  1644   000BF2  A0D8               	btfss	status,0,c
  1645   000BF4  EFFE  F005         	goto	i2u48_41
  1646   000BF8  EF00  F006         	goto	i2u48_40
  1647   000BFC                     i2u48_41:
  1648   000BFC  EF1A  F006         	goto	i2l1083
  1649   000C00                     i2u48_40:
  1650   000C00                     
  1651                           ;isr.c: 14:                     mins = 0;
  1652   000C00  0E00               	movlw	0
  1653   000C02  6E17               	movwf	(_mins+1)^0,c
  1654   000C04  0E00               	movlw	0
  1655   000C06  6E16               	movwf	_mins^0,c
  1656   000C08                     
  1657                           ;isr.c: 15:                     hours++;
  1658   000C08  4A18               	infsnz	_hours^0,f,c
  1659   000C0A  2A19               	incf	(_hours+1)^0,f,c
  1660   000C0C                     
  1661                           ;isr.c: 16:                     if (hours > 23) {
  1662   000C0C  BE19               	btfsc	(_hours+1)^0,7,c
  1663   000C0E  EF12  F006         	goto	i2u49_41
  1664   000C12  5019               	movf	(_hours+1)^0,w,c
  1665   000C14  E109               	bnz	i2u49_40
  1666   000C16  0E18               	movlw	24
  1667   000C18  5C18               	subwf	_hours^0,w,c
  1668   000C1A  A0D8               	btfss	status,0,c
  1669   000C1C  EF12  F006         	goto	i2u49_41
  1670   000C20  EF14  F006         	goto	i2u49_40
  1671   000C24                     i2u49_41:
  1672   000C24  EF1A  F006         	goto	i2l138
  1673   000C28                     i2u49_40:
  1674   000C28                     
  1675                           ;isr.c: 17:                         hours = 0;
  1676   000C28  0E00               	movlw	0
  1677   000C2A  6E19               	movwf	(_hours+1)^0,c
  1678   000C2C  0E00               	movlw	0
  1679   000C2E  6E18               	movwf	_hours^0,c
  1680   000C30  EF1A  F006         	goto	i2l1083
  1681   000C34                     i2l138:
  1682   000C34                     i2l1083:
  1683                           
  1684                           ;isr.c: 22:         TMR0IF = 0;
  1685   000C34  94F2               	bcf	4082,2,c	;volatile
  1686   000C36                     i2l141:
  1687   000C36  9229               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1688   000C38  0011               	retfie		f
  1689   000C3A                     __end_of_isr:
  1690                           	callstack 0
  1691                           
  1692                           	psect	smallconst
  1693   000600                     __psmallconst:
  1694                           	callstack 0
  1695   000600  00                 	db	0
  1696   000601  00                 	db	0	; dummy byte at the end
  1697   000000                     
  1698                           	psect	rparam
  1699   000000                     
  1700                           	psect	temp
  1701   000029                     btemp:
  1702                           	callstack 0
  1703   000029                     	ds	1
  1704   000000                     int$flags	set	btemp
  1705   000000                     wtemp8	set	btemp+1
  1706   000000                     ttemp5	set	btemp+1
  1707   000000                     ttemp6	set	btemp+4
  1708   000000                     ttemp7	set	btemp+8
  1709                           
  1710                           	psect	idloc
  1711                           
  1712                           ;Config register IDLOC0 @ 0x200000
  1713                           ;	unspecified, using default values
  1714   200000                     	org	2097152
  1715   200000  FF                 	db	255
  1716                           
  1717                           ;Config register IDLOC1 @ 0x200001
  1718                           ;	unspecified, using default values
  1719   200001                     	org	2097153
  1720   200001  FF                 	db	255
  1721                           
  1722                           ;Config register IDLOC2 @ 0x200002
  1723                           ;	unspecified, using default values
  1724   200002                     	org	2097154
  1725   200002  FF                 	db	255
  1726                           
  1727                           ;Config register IDLOC3 @ 0x200003
  1728                           ;	unspecified, using default values
  1729   200003                     	org	2097155
  1730   200003  FF                 	db	255
  1731                           
  1732                           ;Config register IDLOC4 @ 0x200004
  1733                           ;	unspecified, using default values
  1734   200004                     	org	2097156
  1735   200004  FF                 	db	255
  1736                           
  1737                           ;Config register IDLOC5 @ 0x200005
  1738                           ;	unspecified, using default values
  1739   200005                     	org	2097157
  1740   200005  FF                 	db	255
  1741                           
  1742                           ;Config register IDLOC6 @ 0x200006
  1743                           ;	unspecified, using default values
  1744   200006                     	org	2097158
  1745   200006  FF                 	db	255
  1746                           
  1747                           ;Config register IDLOC7 @ 0x200007
  1748                           ;	unspecified, using default values
  1749   200007                     	org	2097159
  1750   200007  FF                 	db	255
  1751                           
  1752                           	psect	config
  1753                           
  1754                           ; Padding undefined space
  1755   300000                     	org	3145728
  1756   300000  FF                 	db	255
  1757                           
  1758                           ;Config register CONFIG1H @ 0x300001
  1759                           ;	unspecified, using default values
  1760                           ;	Oscillator Selection bits
  1761                           ;	OSC = 0x7, unprogrammed default
  1762                           ;	Fail-Safe Clock Monitor Enable bit
  1763                           ;	FCMEN = 0x0, unprogrammed default
  1764                           ;	Internal/External Oscillator Switchover bit
  1765                           ;	IESO = 0x0, unprogrammed default
  1766   300001                     	org	3145729
  1767   300001  07                 	db	7
  1768                           
  1769                           ;Config register CONFIG2L @ 0x300002
  1770                           ;	unspecified, using default values
  1771                           ;	Power-up Timer Enable bit
  1772                           ;	PWRT = 0x1, unprogrammed default
  1773                           ;	Brown-out Reset Enable bits
  1774                           ;	BOREN = 0x3, unprogrammed default
  1775                           ;	Brown-out Reset Voltage bits
  1776                           ;	BORV = 0x3, unprogrammed default
  1777   300002                     	org	3145730
  1778   300002  1F                 	db	31
  1779                           
  1780                           ;Config register CONFIG2H @ 0x300003
  1781                           ;	unspecified, using default values
  1782                           ;	Watchdog Timer Enable bit
  1783                           ;	WDT = 0x1, unprogrammed default
  1784                           ;	Watchdog Timer Postscale Select bits
  1785                           ;	WDTPS = 0xF, unprogrammed default
  1786   300003                     	org	3145731
  1787   300003  1F                 	db	31
  1788                           
  1789                           ; Padding undefined space
  1790   300004                     	org	3145732
  1791   300004  FF                 	db	255
  1792                           
  1793                           ;Config register CONFIG3H @ 0x300005
  1794                           ;	unspecified, using default values
  1795                           ;	PORTB A/D Enable bit
  1796                           ;	PBADEN = 0x1, unprogrammed default
  1797                           ;	Low-Power Timer 1 Oscillator Enable bit
  1798                           ;	LPT1OSC = 0x0, unprogrammed default
  1799                           ;	MCLR Pin Enable bit
  1800                           ;	MCLRE = 0x1, unprogrammed default
  1801   300005                     	org	3145733
  1802   300005  82                 	db	130
  1803                           
  1804                           ;Config register CONFIG4L @ 0x300006
  1805                           ;	unspecified, using default values
  1806                           ;	Stack Full/Underflow Reset Enable bit
  1807                           ;	STVREN = 0x1, unprogrammed default
  1808                           ;	Single-Supply ICSP Enable bit
  1809                           ;	LVP = 0x1, unprogrammed default
  1810                           ;	Boot Block Size Select bit
  1811                           ;	BBSIZ = 0x0, unprogrammed default
  1812                           ;	Extended Instruction Set Enable bit
  1813                           ;	XINST = 0x0, unprogrammed default
  1814                           ;	Background Debugger Enable bit
  1815                           ;	DEBUG = 0x1, unprogrammed default
  1816   300006                     	org	3145734
  1817   300006  85                 	db	133
  1818                           
  1819                           ; Padding undefined space
  1820   300007                     	org	3145735
  1821   300007  FF                 	db	255
  1822                           
  1823                           ;Config register CONFIG5L @ 0x300008
  1824                           ;	unspecified, using default values
  1825                           ;	Code Protection bit
  1826                           ;	CP0 = 0x1, unprogrammed default
  1827                           ;	Code Protection bit
  1828                           ;	CP1 = 0x1, unprogrammed default
  1829                           ;	Code Protection bit
  1830                           ;	CP2 = 0x1, unprogrammed default
  1831                           ;	Code Protection bit
  1832                           ;	CP3 = 0x1, unprogrammed default
  1833   300008                     	org	3145736
  1834   300008  0F                 	db	15
  1835                           
  1836                           ;Config register CONFIG5H @ 0x300009
  1837                           ;	unspecified, using default values
  1838                           ;	Boot Block Code Protection bit
  1839                           ;	CPB = 0x1, unprogrammed default
  1840                           ;	Data EEPROM Code Protection bit
  1841                           ;	CPD = 0x1, unprogrammed default
  1842   300009                     	org	3145737
  1843   300009  C0                 	db	192
  1844                           
  1845                           ;Config register CONFIG6L @ 0x30000A
  1846                           ;	unspecified, using default values
  1847                           ;	Write Protection bit
  1848                           ;	WRT0 = 0x1, unprogrammed default
  1849                           ;	Write Protection bit
  1850                           ;	WRT1 = 0x1, unprogrammed default
  1851                           ;	Write Protection bit
  1852                           ;	WRT2 = 0x1, unprogrammed default
  1853                           ;	Write Protection bit
  1854                           ;	WRT3 = 0x1, unprogrammed default
  1855   30000A                     	org	3145738
  1856   30000A  0F                 	db	15
  1857                           
  1858                           ;Config register CONFIG6H @ 0x30000B
  1859                           ;	unspecified, using default values
  1860                           ;	Configuration Register Write Protection bit
  1861                           ;	WRTC = 0x1, unprogrammed default
  1862                           ;	Boot Block Write Protection bit
  1863                           ;	WRTB = 0x1, unprogrammed default
  1864                           ;	Data EEPROM Write Protection bit
  1865                           ;	WRTD = 0x1, unprogrammed default
  1866   30000B                     	org	3145739
  1867   30000B  E0                 	db	224
  1868                           
  1869                           ;Config register CONFIG7L @ 0x30000C
  1870                           ;	unspecified, using default values
  1871                           ;	Table Read Protection bit
  1872                           ;	EBTR0 = 0x1, unprogrammed default
  1873                           ;	Table Read Protection bit
  1874                           ;	EBTR1 = 0x1, unprogrammed default
  1875                           ;	Table Read Protection bit
  1876                           ;	EBTR2 = 0x1, unprogrammed default
  1877                           ;	Table Read Protection bit
  1878                           ;	EBTR3 = 0x1, unprogrammed default
  1879   30000C                     	org	3145740
  1880   30000C  0F                 	db	15
  1881                           
  1882                           ;Config register CONFIG7H @ 0x30000D
  1883                           ;	unspecified, using default values
  1884                           ;	Boot Block Table Read Protection bit
  1885                           ;	EBTRB = 0x1, unprogrammed default
  1886   30000D                     	org	3145741
  1887   30000D  40                 	db	64
  1888                           tosu	equ	0xFFF
  1889                           tosh	equ	0xFFE
  1890                           tosl	equ	0xFFD
  1891                           stkptr	equ	0xFFC
  1892                           pclatu	equ	0xFFB
  1893                           pclath	equ	0xFFA
  1894                           pcl	equ	0xFF9
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           indf0	equ	0xFEF
  1902                           postinc0	equ	0xFEE
  1903                           postdec0	equ	0xFED
  1904                           preinc0	equ	0xFEC
  1905                           plusw0	equ	0xFEB
  1906                           fsr0h	equ	0xFEA
  1907                           fsr0l	equ	0xFE9
  1908                           wreg	equ	0xFE8
  1909                           indf1	equ	0xFE7
  1910                           postinc1	equ	0xFE6
  1911                           postdec1	equ	0xFE5
  1912                           preinc1	equ	0xFE4
  1913                           plusw1	equ	0xFE3
  1914                           fsr1h	equ	0xFE2
  1915                           fsr1l	equ	0xFE1
  1916                           bsr	equ	0xFE0
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           preinc2	equ	0xFDC
  1921                           plusw2	equ	0xFDB
  1922                           fsr2h	equ	0xFDA
  1923                           fsr2l	equ	0xFD9
  1924                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     17      40
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    display@data	PTR unsigned char  size(1) Largest target is 4
		 -> ssd(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->___awdiv

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3155
                                              8 COMRAM     9     9      0
                            ___awdiv
                            ___awmod
                            _display
                        _init_config
                _read_digital_keypad
 ---------------------------------------------------------------------------------
 (1) _read_digital_keypad                                  1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0       0
                   _init_ssd_control
                        _init_timer0
 ---------------------------------------------------------------------------------
 (2) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ssd_control                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              7     6      1     211
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    1360
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _display
   _init_config
     _init_ssd_control
     _init_timer0
   _read_digital_keypad

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      25        0.0%
BITBIGSFRllll      280      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     11      28       1       42.6%
BITBIGSFRlhl        2B      0       0      19        0.0%
BITBIGSFRhl         1A      0       0      17        0.0%
BITBIGSFRlhh        13      0       0      18        0.0%
BITBIGSFRlllhh       E      0       0      21        0.0%
BITBIGSFRhh          D      0       0      16        0.0%
BITBIGSFRlllhl       1      0       0      22        0.0%
BITBIGSFRllh         1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      28      24        0.0%
DATA                 0      0      28       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Jul 23 08:28:29 2024

                               l60 06C4                                 l80 0A08  
                               l82 09A8                                 l91 0D8C  
                               l67 080A                                 l59 0954  
                               l88 0D6E                                 l98 0CAE  
                               u10 0C4C                                 u11 0C48  
                               u20 0C60                                 u21 0C5C  
                               u30 0C70                                 u31 0C6C  
                               u40 0C90                                 u41 0C8C  
                               u50 0CA8                                 u51 0CA4  
                     ___awdiv@sign 0006                                l121 0D14  
                              l113 0D9E                                l375 0ADA  
                              l388 0B8A                                l821 0D98  
                              l831 0D7A                                l823 0D70  
                              l817 0D8E                                l833 0D7C  
                              l825 0D72                                l841 0D4C  
                              l819 0D92                                l835 0D86  
                              l827 0D76                                l843 0D50  
                              l851 0C3C                                l837 0D88  
                              l829 0D78                                l845 0D54  
                              l853 0C4C                                l839 0D8A  
                              l847 0D64                                l855 0C60  
                              l849 0D68                                l857 0C70  
                              l865 0C7C                                l867 0C90  
                              l875 0CAC                                l859 0C74  
                              l869 0C98                                _GIE 7F97  
                              u510 0D02                                u511 0CFE  
                              u600 0B08                                u520 0D14  
                              u504 0CD2                                u601 0B04  
                              u521 0D10                                u505 0CCE  
                              u530 0A2A                                u610 0B22  
                              u531 0A26                                u611 0B1E  
                              u540 0A44                                u620 0B40  
                              u700 0686                                u541 0A40  
                              u621 0B3C                                u701 0682  
                              u550 0A6A                                u630 0B56  
                              u710 069A                                u551 0A66  
                              u631 0B52                                u711 0696  
                              u560 0A88                                u640 0B7A  
                              u800 07FE                                u720 06AE  
                              u561 0A84                                u641 0B76  
                              u801 07FA                                u721 06A8  
                              u570 0AA4                                u810 0820  
                              u730 06B0                                u650 0640  
                              u571 0AA0                                u811 081C  
                              u651 063C                                u580 0ACA  
                              u820 0878                                u740 06D6  
                              u660 0650                                u581 0AC6  
                              u821 0874                                u741 06D2  
                              u661 064A                                u590 0AEE  
                              u830 08D0                                u750 072E  
                              u591 0AEA                                u831 08CC  
                              u751 072A                                _PSA 7EAB  
                              u840 08F4                                u760 0786  
                              u680 0666                                u841 08F0  
                              u761 0782                                u681 0660  
                              u850 0914                                u770 07AA  
                              u690 0668                                u851 0910  
                              u771 07A6                                u675 0652  
                              u860 0934                                u780 07CA  
                              u861 0930                                u781 07C6  
                              u870 0948                                u790 07EA  
                              u871 0944                                u791 07E6  
                              u880 0962                                u881 095E  
                              _sec 0014                                _isr 0008  
                              _ssd 001A                       ___awmod@sign 0006  
                              wreg 0FE8                               l1101 0D04  
                             l1111 0A36                               l1103 0A18  
                             l1121 0A6A                               l1113 0A44  
                             l1105 0A1C                               l1201 069A  
                             l1131 0AA4                               l1123 0A72  
                             l1115 0A4C                               l1107 0A2A  
                             l1211 072E                               l1203 06B4  
                             l1141 0ACA                               l1133 0AAC  
                             l1125 0A7A                               l1117 0A50  
                             l1109 0A32                               l1221 07AE  
                             l1213 0772                               l1205 06BC  
                             l1143 0AD2                               l1135 0AAE  
                             l1127 0A88                               l1119 0A58  
                             l1151 0AEE                               l1231 07FE  
                             l1223 07CA                               l1215 0786  
                             l1207 06D6                               l1137 0AB4  
                             l1129 0A8E                               l1161 0B22  
                             l1153 0AF6                               l1241 08BC  
                             l1225 07D6                               l1217 0796  
                             l1209 0716                               l1233 080E  
                             l1139 0ABA                               l1171 0B5E  
                             l1163 0B2A                               l1155 0AFA  
                             l1147 0ADC                               l1091 0CB4  
                             l1251 0914                               l1243 08D0  
                             l1235 0820                               l1227 07EA  
                             l1219 07AA                               l1173 0B64  
                             l1165 0B32                               l1157 0B08  
                             l1149 0AE0                               l1093 0CC0  
                             l1085 0CB0                               l1261 0962  
                             l1253 0920                               l1245 08E0  
                             l1237 0860                               l1229 07F0  
                             l1167 0B40                               l1175 0B6A  
                             l1159 0B10                               l1095 0CE0  
                             l1263 0962                               l1255 0934  
                             l1247 08F4                               l1239 0878  
                             l1191 0640                               l1183 0602  
                             l1177 0B7A                               l1169 0B56  
                             l1097 0CE8                               l1265 0988  
                             l1257 093A                               l1249 08F8  
                             l1193 0652                               l1185 061A  
            ??_read_digital_keypad 0001                               l1179 0B82  
                             l1099 0D02                               l1259 0948  
                             l1195 066C                               l1187 061E  
                             l1197 0674                               l1189 062C  
                             l1199 0686                               ?_isr 0001  
                             _T0CS 7EAD                               _PEIE 7F96  
                             _TMR0 0FD6                        display@data 0001  
                      display@wait 0004                               _main 0602  
                             _mins 0016                               fsr2h 0FDA  
                             indf2 0FDF                               fsr1l 0FE1  
                             fsr2l 0FD9                               btemp 0029  
                             start 000E                       ___param_bank 0000  
                            ??_isr 0001                              ?_main 0001  
                  __end_of___awdiv 0ADC                    __end_of___awmod 0B8C  
                  ___awdiv@divisor 0003                              i2l141 0C36  
                            i2l138 0C34                       ?_init_config 0001  
                  ___awdiv@counter 0005                              _PORTA 0F80  
                            _PORTC 0F82                              _PORTD 0F83  
                            _TRISA 0F92                              _TRISC 0F94  
                            _TRISD 0F95                       ?_init_timer0 0001  
                     display@digit 0006                    __end_of_display 0D16  
                            _digit 001E                              _hours 0018  
                            tablat 0FF5                              ttemp5 002A  
                            ttemp6 002D                              ttemp7 0031  
                            status 0FD8                              wtemp8 002A  
                  __initialization 0D16                       __end_of_main 0A18  
                ?_init_ssd_control 0001                             ??_main 0009  
                    __activetblptr 0000                 ??_init_ssd_control 0001  
                           _ADCON1 0FC1                             _T08BIT 7EAE  
                 ___awdiv@dividend 0001                             i2l1061 0B8E  
                           i2l1071 0BE0                             i2l1063 0B9C  
                           i2l1081 0C28                             i2l1073 0BE4  
                           i2l1065 0BB8                             i2l1075 0C00  
                           i2l1067 0BC0                             i2l1083 0C34  
                           i2l1077 0C08                             i2l1069 0BD8  
                           i2l1079 0C0C                             _TMR0IE 7F95  
                           _TMR0IF 7F92                             _TMR0ON 7EAF  
                        ??___awdiv 0005                          ??___awmod 0005  
                           clear_0 0D3C                   ___awdiv@quotient 0007  
                  ___awmod@divisor 0003                             isa$std 0001  
                  ___awmod@counter 0005                          ??_display 0002  
                     __pdataCOMRAM 001E                       __mediumconst 0000  
                           tblptrh 0FF7                             tblptrl 0FF6  
                           tblptru 0FF8                         __accesstop 0060  
          __end_of__initialization 0D42                      ___rparam_used 0001  
                   __pcstackCOMRAM 0001        __end_of_read_digital_keypad 0CB0  
                          i2u45_40 0B9C                            i2u45_41 0B98  
                          i2u46_40 0BB8                            i2u46_41 0BB4  
                          i2u47_40 0BD8                            i2u47_41 0BD4  
                          i2u48_40 0C00                            i2u48_41 0BFC  
                          i2u49_40 0C28                            i2u49_41 0C24  
                          __Hparam 0000                            __Lparam 0000  
                          ___awdiv 0A18                            ___awmod 0ADC  
                     __psmallconst 0600                            __pcinit 0D16  
                          __ramtop 0600                            __ptext0 0602  
                          __ptext1 0C3A                            __ptext2 0D4C  
                          __ptext3 0D70                            __ptext4 0D8E  
                          __ptext5 0CB0                            __ptext6 0ADC  
                          __ptext7 0A18                            _display 0CB0  
                 ___awmod@dividend 0001                            main@key 0010  
                   __pintcode_body 0B8C               end_of_initialization 0D42  
                          int_func 0B8C                            postdec1 0FE5  
                          postinc0 0FEE                      __pidataCOMRAM 0DA0  
              start_initialization 0D16                        __end_of_isr 0C3A  
                    ??_init_config 0001                      ??_init_timer0 0001  
                      __pbssCOMRAM 0012                   _init_ssd_control 0D8E  
                        __pintcode 0008                           ?___awdiv 0001  
                         ?___awmod 0001                           ?_display 0001  
                      __smallconst 0600                __end_of_init_config 0D70  
              __end_of_init_timer0 0D8E  read_digital_keypad@detection_type 0001  
                        copy_data0 0D2A                           __Hrparam 0000  
                         __Lrparam 0000                        _init_config 0D4C  
                      _init_timer0 0D70                    main@select_flag 000C  
          read_digital_keypad@once 0028                           isa$xinst 0000  
                         int$flags 0029           __end_of_init_ssd_control 0DA0  
                         main@flag 000A                           main@wait 000E  
                         isr@count 0012                           intlevel2 0000  
              _read_digital_keypad 0C3A               ?_read_digital_keypad 0001  
